<?xml version="1.0" encoding="UTF-8"?>
<metrics>
  <metric id="20140522" contributorId="20140523" critical="false" value="8" contributorOriginalName="GreenIT - focus on pipe leaks - data access efficiency" contributorType="technical-criterion" originalName="GreenIT" type="business-criterion" weight="8"/>
  <metric id="20140522" contributorId="20140524" critical="false" value="8" contributorOriginalName="GreenIT - focus on pipe ruptures - avoiding failure" contributorType="technical-criterion" originalName="GreenIT" type="business-criterion" weight="8"/>
  <metric id="20140522" contributorId="20140525" critical="false" value="8" contributorOriginalName="GreenIT - focus on pipe leaks - algorithmic costs" contributorType="technical-criterion" originalName="GreenIT" type="business-criterion" weight="8"/>
  <metric id="20140522" contributorId="20140526" critical="false" value="8" contributorOriginalName="GreenIT - focus on pipe leaks - resource economy" contributorType="technical-criterion" originalName="GreenIT" type="business-criterion" weight="8"/>
  <metric id="20140524" contributorId="592" critical="true" value="8" contributorOriginalName="Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="678" critical="true" value="9" contributorOriginalName="Never throw an exception from a Destructor" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="1588" critical="false" value="8" contributorOriginalName="Use WHEN OTHERS in exception management" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="2232" critical="true" value="7" contributorOriginalName="Pages should use error handling page" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="2564" critical="false" value="6" contributorOriginalName="Use a single Error Handling Method" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="2590" critical="false" value="7" contributorOriginalName="Avoid using &quot;On error Resume Next&quot; in the Class event terminate" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="3062" critical="false" value="6" contributorOriginalName="Use of error handling page" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="4064" critical="true" value="8" contributorOriginalName="Avoid Procedures using an Insert, Update, Delete, Create Table or Select without including error management" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="4066" critical="false" value="6" contributorOriginalName="Avoid Stored Procedures not returning a status value" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="4070" critical="true" value="9" contributorOriginalName="Avoid use of &quot;truncate table&quot;" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="4612" critical="false" value="7" contributorOriginalName="Avoid using native Methods (JNI)" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="4612" critical="false" value="7" contributorOriginalName="Avoid using native Methods (JNI)" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="4652" critical="false" value="8" contributorOriginalName="Avoid direct Class inheritance from java.lang.Throwable" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="4656" critical="false" value="6" contributorOriginalName="Avoid declaring throwing an exception and not throwing it" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="4696" critical="false" value="6" contributorOriginalName="Avoid using 'System.err' and 'System.out' within a try catch block" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="4698" critical="false" value="6" contributorOriginalName="Avoid using 'System.err' and 'System.out' outside a try catch block" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="4702" critical="false" value="6" contributorOriginalName="Avoid using 'Throwable.printStackTrace()' with no argument" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="5050" critical="false" value="5" contributorOriginalName="Avoid using HANDLE CONDITION" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="5052" critical="false" value="5" contributorOriginalName="Avoid using IGNORE CONDITION" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="5054" critical="false" value="5" contributorOriginalName="Avoid using HANDLE ABEND" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="5092" critical="false" value="8" contributorOriginalName="Include a WHEN OTHER clause when using EVALUATE" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7152" critical="true" value="8" contributorOriginalName="Avoid Fields in Servlet Classes that are not final static" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7154" critical="true" value="8" contributorOriginalName="Avoid Fields in Action Classes that are not final static" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7202" critical="false" value="5" contributorOriginalName="Check usage of '==' and '!=' on objects" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="7438" critical="true" value="9" contributorOriginalName="Avoid non thread safe singleton" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7442" critical="true" value="8" contributorOriginalName="Avoid to use this within Constructor in multi-thread environment" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7446" critical="true" value="9" contributorOriginalName="Avoid double checked locking for JSE 4.x and previous version" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7494" critical="true" value="9" contributorOriginalName="Persistent class method's equals() and hashCode() must access its fields through getter methods" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7504" critical="true" value="9" contributorOriginalName="Persistent classes should Implement hashCode() and equals()" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7506" critical="true" value="9" contributorOriginalName="Define equals() and hashCode() for component" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7508" critical="false" value="8" contributorOriginalName="Collection-typed attributes getter must be defined with the correct interface" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7518" critical="false" value="8" contributorOriginalName="Avoid missing WHEN OTHERS in CASE statements" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7520" critical="true" value="8" contributorOriginalName="Avoid unchecked return code (SY-SUBRC) after OPEN SQL or READ statement" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7528" critical="false" value="9" contributorOriginalName="Never use the ON CHANGE OF statement" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7536" critical="true" value="7" contributorOriginalName="Avoid using AT Events in combination of LOOP AT .... WHERE constructs" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7548" critical="true" value="9" contributorOriginalName="Never use incompatible statements with the CICS environment" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7556" critical="false" value="5" contributorOriginalName="Avoid instanceof in Methods that override or implement Object.equals(), Comparable.compareTo()" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="7586" critical="false" value="9" contributorOriginalName="Avoid cyclic calls between Event and its handled Method" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7636" critical="false" value="7" contributorOriginalName="Use version instead of timestamp" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7640" critical="false" value="6" contributorOriginalName="Avoid catch blocks with assertion" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="7650" critical="false" value="5" contributorOriginalName="All types of a serializable Class must be serializable" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="7652" critical="false" value="6" contributorOriginalName="Avoid throwing an exception in a catch block without chaining it" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="7688" critical="true" value="9" contributorOriginalName="Never truncate data in MOVE statements" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7690" critical="true" value="8" contributorOriginalName="Avoid unchecked return code (SQLCODE) after EXEC SQL query" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7698" critical="false" value="8" contributorOriginalName="Files should be declared with a FILE-STATUS" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7708" critical="false" value="8" contributorOriginalName="Avoid using session.setFlushMode(FlushMode.COMMIT, FlushMode.NEVER or FlushMode.MANUAL)" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7710" critical="false" value="8" contributorOriginalName="Avoid non serializable Entities" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7712" critical="false" value="7" contributorOriginalName="Avoid public/protected setter for the generated identifier field" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7722" critical="true" value="9" contributorOriginalName="Avoid using references to the id in the persistent class's method equals()" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7724" critical="true" value="9" contributorOriginalName="Overriden equals() Methods in persistent Subclasses should only reference properties from the persistent base Class" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7728" critical="false" value="9" contributorOriginalName="Avoid thread creation for application running on application server" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7730" critical="false" value="7" contributorOriginalName="Use declarative transaction" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7756" critical="false" value="8" contributorOriginalName="Avoid using READ statement without AT END clause or INVALID KEY clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7782" critical="false" value="6" contributorOriginalName="Avoid empty finally blocks" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="7788" critical="true" value="7" contributorOriginalName="Avoid empty catch blocks" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7824" critical="true" value="8" contributorOriginalName="Avoid directly throwing instance of Exception class" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7850" critical="false" value="8" contributorOriginalName="Avoid raising an exception in a Web Dynpro Supply Function or in a Method called by a Supply Function" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7862" critical="false" value="8" contributorOriginalName="Avoid catching an exception of type Exception, RuntimeException, or Throwable" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7864" critical="true" value="8" contributorOriginalName="BAPIs must not cause the Program to abort or terminate" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7884" critical="false" value="5" contributorOriginalName="Avoid disabling source code inspection" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="7888" critical="false" value="9" contributorOriginalName="Web Dynpro - Never use direct calls to routine via &quot;me-&gt;&quot;, use &quot;wd_This-&gt;&quot; instead" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7890" critical="true" value="8" contributorOriginalName="Web Dynpro - Never use INCLUDE statement" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7892" critical="true" value="9" contributorOriginalName="Web Dynpro - Avoid changing the program flow" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7910" critical="true" value="8" contributorOriginalName="Never exit a finally block with a return, break, continue, or throw" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="7942" critical="false" value="7" contributorOriginalName="Avoid EJBs using 'synchronized' qualifier, 'wait', 'notify' and 'notifyAll' Methods" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="7964" critical="true" value="9" contributorOriginalName="Avoid directly instantiating a Class used as a managed bean" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="7998" critical="false" value="5" contributorOriginalName="Avoid local variables that are not initialized at declaration time" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="8000" critical="false" value="6" contributorOriginalName="Avoid 'catch-all' statement" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="8002" critical="false" value="9" contributorOriginalName="Never perform C-style cast between incompatible Class pointers" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8004" critical="false" value="8" contributorOriginalName="Avoid using 'delete this'" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="8006" critical="false" value="7" contributorOriginalName="Avoid Classes with a copy Constructor and the default Destructor or assignment operator" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="8010" critical="false" value="6" contributorOriginalName="Do not overload the ampersand, comma, logical AND or logical OR operators" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="8010" critical="false" value="6" contributorOriginalName="Do not overload the ampersand, comma, logical AND or logical OR operators" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="8012" critical="false" value="8" contributorOriginalName="Avoid unchecked return code (SY-SUBRC) after opening and reading dataset" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="8014" critical="true" value="9" contributorOriginalName="Avoid unchecked return code (SY-SUBRC) after AUTHORITY-CHECK" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8024" critical="false" value="5" contributorOriginalName="Avoid Classes with a non-empty Destructor and the default assignment operator or copy Constructor" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="5"/>
  <metric id="20140524" contributorId="8026" critical="false" value="7" contributorOriginalName="Avoid Classes with an assignment operator and the default Destructor or copy constructor" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="8028" critical="false" value="8" contributorOriginalName="Avoid missing default in switch statements" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="8030" critical="false" value="9" contributorOriginalName="Check alphanumeric data before moving it into numeric data" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8034" critical="false" value="9" contributorOriginalName="Variables defined in Working-Storage section must be initialized before to be read" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8052" critical="true" value="9" contributorOriginalName="Avoid setting a pointer to the address of a local variable defined in a lower scope" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8054" critical="false" value="8" contributorOriginalName="Avoid calling blocking functions with an infinite timeout" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="8056" critical="false" value="9" contributorOriginalName="Method override fails due to mismatch of const/volatile qualifiers" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8064" critical="false" value="8" contributorOriginalName="Assignment operator should assign all non-static members of the target object" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="8"/>
  <metric id="20140524" contributorId="8072" critical="true" value="9" contributorOriginalName="Never define collection of 'std::auto_ptr'" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8074" critical="false" value="6" contributorOriginalName="Avoid using 'class' or 'struct' parameters with variadic Functions" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="8090" critical="false" value="7" contributorOriginalName="Avoid using NaN to test the result of an expression" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="8094" critical="false" value="7" contributorOriginalName="Avoid locking of Objects with weak identities" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="7"/>
  <metric id="20140524" contributorId="8096" critical="true" value="9" contributorOriginalName="Avoid testing floating point numbers for equality" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8106" critical="true" value="6" contributorOriginalName="Avoid empty IF-ENDIF blocks" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="6"/>
  <metric id="20140524" contributorId="8112" critical="true" value="9" contributorOriginalName="Avoid improper processing of the execution status of data handling operations" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140524" contributorId="8114" critical="false" value="9" contributorOriginalName="Avoid numerical data corruption during incompatible mutation (ABAP)" contributorType="quality-rule" originalName="GreenIT - focus on pipe ruptures - avoiding failure" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="1578" critical="false" value="8" contributorOriginalName="Avoid using LONG &amp; LONG RAW datatype for Table Columns" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="1580" critical="true" value="9" contributorOriginalName="Avoid using execute immediate" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="1598" critical="false" value="8" contributorOriginalName="Avoid Rule HINT  /*+ rule */ or --+ rule in PL/SQL code" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="4084" critical="false" value="8" contributorOriginalName="Avoid nested Stored Procedures using temporary Tables" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="5056" critical="false" value="9" contributorOriginalName="Using SEARCH ALL only with sorted data" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="5058" critical="false" value="9" contributorOriginalName="Avoid using SORT" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="5060" critical="false" value="9" contributorOriginalName="Avoid using MERGE" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="5554" critical="false" value="8" contributorOriginalName="Avoid having SQL code in Triggers named &quot;pre-record&quot;" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="6184" critical="true" value="9" contributorOriginalName="Avoid Artifacts with Subqueries (Power Builder)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7130" critical="false" value="7" contributorOriginalName="Avoid Artifacts with High Depth of Nested Subqueries" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7344" critical="false" value="8" contributorOriginalName="Avoid &quot;SELECT *&quot; queries" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7346" critical="false" value="8" contributorOriginalName="Avoid redundant indexes" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7348" critical="false" value="8" contributorOriginalName="Avoid too many Indexes on one Table" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7350" critical="false" value="8" contributorOriginalName="Avoid Tables having Indexes with a too large Index definition" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7358" critical="true" value="8" contributorOriginalName="Avoid call to AcceptChanges in a loop" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7366" critical="true" value="9" contributorOriginalName="File descriptor block must be defined with 0 record" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7386" critical="false" value="8" contributorOriginalName="Avoid Tables without a clustered Index" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7418" critical="false" value="9" contributorOriginalName="Avoid SQL queries using functions on indexed columns in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7420" critical="false" value="9" contributorOriginalName="Avoid SQL queries with implicit conversions in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7428" critical="false" value="6" contributorOriginalName="Avoid SQL queries not using the first column of a composite index in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7436" critical="false" value="6" contributorOriginalName="Prefer UNION ALL to UNION" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7476" critical="true" value="7" contributorOriginalName="Turn off &quot;Multiple SQL statements for each measure&quot;" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7480" critical="false" value="5" contributorOriginalName="Use aggregate awareness for indicators" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="7482" critical="true" value="7" contributorOriginalName="Do not use Cartesian products in Universe properties" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7488" critical="true" value="9" contributorOriginalName="Use lazy fetching for collection" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7490" critical="false" value="6" contributorOriginalName="Avoid UPDATE trigger firing when not necessary" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7496" critical="false" value="8" contributorOriginalName="Use table-per-subclass strategy when subclasses have many properties" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7498" critical="false" value="8" contributorOriginalName="Collection must be the same between getter and setter" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7500" critical="false" value="8" contributorOriginalName="Use table-per-class-hierarchy when subclasses have few properties" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7502" critical="true" value="9" contributorOriginalName="Never use array to map a collection" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7530" critical="false" value="8" contributorOriginalName="Avoid &quot;SELECT *&quot; or &quot;SELECT SINGLE *&quot; queries" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7534" critical="true" value="9" contributorOriginalName="Avoid READ TABLE without BINARY SEARCH" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7538" critical="true" value="8" contributorOriginalName="Avoid using SELECT ... INTO CORRESPONDING FIELDS OF" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7542" critical="false" value="9" contributorOriginalName="Avoid using FOR ALL ENTRIES IN without emptiness check" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7544" critical="false" value="6" contributorOriginalName="Avoid using SELECT ... ENDSELECT statement" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7592" critical="false" value="6" contributorOriginalName="Avoid using &quot;ORDER BY&quot; in SELECTS" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7594" critical="false" value="7" contributorOriginalName="Avoid using &quot;SELECT DISTINCT&quot;, use DELETE-ADJACENT" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7634" critical="true" value="9" contributorOriginalName="Avoid select-before-update when the Table is not associated to an UPDATE Trigger" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7642" critical="false" value="6" contributorOriginalName="Avoid SQL queries on XXL tables not using the first column of a composite index in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7644" critical="false" value="7" contributorOriginalName="Avoid executing multiple OPEN statements" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7658" critical="false" value="6" contributorOriginalName="Avoid SQL queries on XXL Tables using Functions on indexed Columns in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7660" critical="false" value="6" contributorOriginalName="Never use SQL queries with a cartesian product on XXL Tables" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7662" critical="false" value="6" contributorOriginalName="Avoid SQL queries on XXL Tables with implicit conversions in the WHERE clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="7664" critical="false" value="9" contributorOriginalName="Avoid using FOR ALL ENTRIES IN without emptiness check on XXL Tables" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7666" critical="false" value="8" contributorOriginalName="Avoid using SELECT ... ENDSELECT statement on XXL Tables" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7692" critical="false" value="7" contributorOriginalName="Each opened file must be closed" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7702" critical="false" value="8" contributorOriginalName="Use a third party connection pool" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140523" contributorId="7806" critical="false" value="5" contributorOriginalName="Avoid Artifacts with Group By" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="7808" critical="false" value="7" contributorOriginalName="Avoid Artifacts with SQL statement including subqueries" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7810" critical="false" value="5" contributorOriginalName="Avoid Artifacts with a Complex SELECT Clause" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="7820" critical="false" value="7" contributorOriginalName="Never use SQL queries with a cartesian product" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7822" critical="false" value="7" contributorOriginalName="Avoid Artifacts with queries on more than 4 Tables" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7828" critical="false" value="5" contributorOriginalName="Avoid Artifacts with High RAW SQL Complexity" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="7866" critical="false" value="9" contributorOriginalName="Avoid SELECT ... BYPASSING BUFFER" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7870" critical="false" value="7" contributorOriginalName="Avoid using the NOT LIKE operator in WHERE clauses" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="7"/>
  <metric id="20140523" contributorId="7872" critical="false" value="9" contributorOriginalName="Avoid using IS [NOT] NULL in WHERE condition" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7876" critical="false" value="9" contributorOriginalName="Avoid using SELECT ... FOR UPDATE" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7878" critical="true" value="9" contributorOriginalName="Avoid Open SQL SELECT queries without WHERE condition" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7902" critical="false" value="9" contributorOriginalName="Avoid SQL queries that no index can support" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="7904" critical="true" value="9" contributorOriginalName="Avoid SQL queries on XXL tables that no index can support" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140523" contributorId="8080" critical="true" value="6" contributorOriginalName="Avoid exists independent clauses" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="6"/>
  <metric id="20140523" contributorId="8082" critical="true" value="5" contributorOriginalName="Avoid Tables without Primary Key" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="8110" critical="true" value="9" contributorOriginalName="Avoid not using dedicated stored procedures when processing multiple data accesses" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="9"/>
  <metric id="20140525" contributorId="7198" critical="false" value="5" contributorOriginalName="Avoid String concatenation in loops (.NET)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7200" critical="false" value="5" contributorOriginalName="Avoid String concatenation in loops (JEE)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7204" critical="false" value="5" contributorOriginalName="Avoid method invocation in a loop termination expression" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7210" critical="false" value="5" contributorOriginalName="Avoid instantiations inside loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7212" critical="true" value="8" contributorOriginalName="Avoid instantiations inside loops (.NET)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="8"/>
  <metric id="20140525" contributorId="7218" critical="true" value="8" contributorOriginalName="Avoid OPEN/CLOSE inside loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="8"/>
  <metric id="20140525" contributorId="7352" critical="false" value="7" contributorOriginalName="Avoid calling properties that clone values in loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="7"/>
  <metric id="20140525" contributorId="7424" critical="false" value="5" contributorOriginalName="Avoid using SQL queries inside a loop" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7470" critical="true" value="7" contributorOriginalName="Avoid doing select on Datatable in loop" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="7"/>
  <metric id="20140525" contributorId="7532" critical="true" value="9" contributorOriginalName="Avoid nested SELECT ... ENDSELECT statements" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="9"/>
  <metric id="20140525" contributorId="7790" critical="false" value="5" contributorOriginalName="Avoid Cursors inside a loop" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7868" critical="true" value="7" contributorOriginalName="Avoid Open SQL queries in loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="7"/>
  <metric id="20140525" contributorId="7880" critical="false" value="8" contributorOriginalName="Avoid nested loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="8"/>
  <metric id="20140525" contributorId="7894" critical="false" value="8" contributorOriginalName="Avoid using LOOP INTO, use LOOP ASSIGNING instead" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="8"/>
  <metric id="20140525" contributorId="7954" critical="false" value="5" contributorOriginalName="Avoid indirect String concatenation inside loops" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="5"/>
  <metric id="20140525" contributorId="7962" critical="false" value="6" contributorOriginalName="Avoid direct or indirect remote calls inside a loop" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - algorithmic costs" type="technical-criterion" weight="6"/>
  <metric id="20140526" contributorId="1072" critical="false" value="5" contributorOriginalName="Avoid using memory management Functions (free/malloc/realloc)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="5"/>
  <metric id="20140526" contributorId="1074" critical="false" value="5" contributorOriginalName="Avoid using signals management Functions" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="5"/>
  <metric id="20140526" contributorId="3612" critical="true" value="8" contributorOriginalName="Avoid missing release of SQL connection after an effective lifetime (C#, VB.NET)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="8"/>
  <metric id="20140526" contributorId="4694" critical="false" value="6" contributorOriginalName="Avoid using 'System.gc'" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="6"/>
  <metric id="20140526" contributorId="4744" critical="true" value="7" contributorOriginalName="EJB Entity access through their local Interface" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="7"/>
  <metric id="20140526" contributorId="4746" critical="true" value="7" contributorOriginalName="EJB Session access through their local Interface" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="7"/>
  <metric id="20140526" contributorId="7194" critical="false" value="6" contributorOriginalName="Avoid large number of String concatenation (.NET)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="6"/>
  <metric id="20140526" contributorId="7196" critical="false" value="6" contributorOriginalName="Avoid large number of String concatenation (JEE)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="6"/>
  <metric id="20140526" contributorId="7250" critical="false" value="6" contributorOriginalName="Avoid String initialization with String object (created using the 'new' keyword)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="6"/>
  <metric id="20140526" contributorId="7254" critical="false" value="5" contributorOriginalName="Declare as Static all methods not using instance members (JEE)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="5"/>
  <metric id="20140526" contributorId="7270" critical="false" value="5" contributorOriginalName="Declare as Static all methods not using instance members (.NET)" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="5"/>
  <metric id="20140526" contributorId="7638" critical="false" value="9" contributorOriginalName="Avoid using DriverManager" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="9"/>
  <metric id="20140526" contributorId="7720" critical="true" value="9" contributorOriginalName="Avoid too many EJB bean" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="9"/>
  <metric id="20140526" contributorId="7936" critical="true" value="8" contributorOriginalName="Avoid using finalize()" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="8"/>
  <metric id="20140526" contributorId="7940" critical="true" value="7" contributorOriginalName="Avoid Stateful Beans not removed" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="7"/>
  <metric id="20140526" contributorId="8048" critical="true" value="9" contributorOriginalName="Invoke 'delete' with the same form as the matching 'new'" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="9"/>
  <metric id="20140526" contributorId="8068" critical="true" value="9" contributorOriginalName="Do not return a dereferenced pointer allocated inside the function" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="9"/>
  <metric id="20140526" contributorId="8100" critical="false" value="9" contributorOriginalName="Blocking synchronous calls should have associated timeouts" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="9"/>
  <metric id="20140526" contributorId="8104" critical="true" value="8" contributorOriginalName="Close database resources ASAP" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="8"/>
  <metric id="20140526" contributorId="8108" critical="false" value="5" contributorOriginalName="Avoid missing release of stream connection after an effective lifetime" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="5"/>
  <metric id="20140523" contributorId="8142" critical="true" value="8" contributorOriginalName="Prefer using indexes instead of subscripts" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - data access efficiency" type="technical-criterion" weight="8"/>
  <metric id="20140526" contributorId="8140" critical="true" value="8" contributorOriginalName="Subscripts and iterators must be defined with BINARY usage" contributorType="quality-rule" originalName="GreenIT - focus on pipe leaks - resource economy" type="technical-criterion" weight="8"/>
</metrics>
